<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Yt music Controller</title>
    <!-- Load Socket.IO client -->
    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
    <link rel="stylesheet" href="main.css" />
  </head>
  <body>
    <h1>Welcome ðŸ‘‹ <%= ipAddress %></h1>
    <p>Status: <span id="status">Disconnected</span></p>

    <div class="img_container">
      <img src="" alt="song" id="songImg" />
    </div>
    <p>
      <small>Currently Playing:</small
      ><marquee behavior="scroll" id="song">No song</marquee> <br /><small
        >By:</small
      ><br />
      <span id="artist"> Unknown</span>
    </p>
    <div>
      <input type="range" id="slideBar" min="0" max="1" step="0.01" />
      <span id="sliderValue">Volume</span>
    </div>
    <div class="controller">
      <button id="prevSong">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="bi bi-skip-start-fill"
          viewBox="0 0 16 16"
        >
          <path
            d="M4 4a.5.5 0 0 1 1 0v3.248l6.267-3.636c.54-.313 1.232.066 1.232.696v7.384c0 .63-.692 1.01-1.232.697L5 8.753V12a.5.5 0 0 1-1 0z"
          />
        </svg>
      </button>
      <button id="play_pause">Play</button>
      <button id="nextSong">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          fill="currentColor"
          class="bi bi-skip-end-fill"
          viewBox="0 0 16 16"
        >
          <path
            d="M12.5 4a.5.5 0 0 0-1 0v3.248L5.233 3.612C4.693 3.3 4 3.678 4 4.308v7.384c0 .63.692 1.01 1.233.697L11.5 8.753V12a.5.5 0 0 0 1 0z"
          />
        </svg>
      </button>
	  <button id="liked" like-status="INDIFFERENT">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="26"
          height="26"
          fill="currentColor"
          class="bi bi-skip-end-fill"
          viewBox="0 0 26 26"
		  preserveAspectRatio="none"
        >
          <path
            d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"
          />
        </svg>
      </button>
    </div>

    <button id="updateQueue">Update Queue</button>
    <div id="queueContainer"></div>
    <script>
      const SERVER_IP = "<%= ipAddress %>:3000";
      // Create a socket connection to your server
      const socket = io(SERVER_IP); // Replace with your server URL if needed

      // Update status when connected
      socket.on("connect", () => {
        console.log("Connected to WebSocket server");
        document.getElementById("status").textContent = "Connected";
      });

      // Handle disconnection
      socket.on("disconnect", () => {
        console.log("Disconnected from WebSocket server");
        document.getElementById("status").textContent = "Disconnected";
      });
      let img = "";
      const sliderValue = document.getElementById("sliderValue");
      const slider = document.getElementById("slideBar");
      // Handle incoming song data
      socket.on("song", (data) => {
        console.log("Received song data from server:", data);
        document.getElementById("song").textContent = data.title || "No song";
		document.getElementById("liked").setAttribute("like-status", data.like);
        document.getElementById("play_pause").innerHTML = data.playing
          ? `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pause-fill" viewBox="0 0 16 16">
  <path d="M5.5 3.5A1.5 1.5 0 0 1 7 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5m5 0A1.5 1.5 0 0 1 12 5v6a1.5 1.5 0 0 1-3 0V5a1.5 1.5 0 0 1 1.5-1.5"/>
</svg>`
          : `<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-play-fill" viewBox="0 0 16 16">
  <path d="m11.596 8.697-6.363 3.692c-.54.313-1.233-.066-1.233-.697V4.308c0-.63.692-1.01 1.233-.696l6.363 3.692a.802.802 0 0 1 0 1.393"/>
</svg>`;
        document.getElementById("artist").textContent =
          data.artist || "Unknown Artist";
        sliderValue.innerText = data.slider;
        slider.value = timeToRatio(data.slider);
        if (data.image !== img) {
          const updatedUrl = data.image.replace(
            /(w)(\d+)-(h)(\d+)/,
            `$1${300}-$3${300}`
          );

          document.getElementById("songImg").src = updatedUrl;

          img = data.image;
        }
      });

      slider.addEventListener("input", (event) => {
        const value = event.target.value;
        socket.emit("slider", value);
      });
      // Button events for controlling playback
      document.getElementById("nextSong").addEventListener("click", () => {
        console.log("Emitting 'nextSong'");
        socket.emit("nextSong");
      });

      document.getElementById("prevSong").addEventListener("click", () => {
        console.log("Emitting 'prevSong'");
        socket.emit("prevSong");
      });

      document.getElementById("play_pause").addEventListener("click", () => {
        console.log("Emitting 'play_pause'");
        socket.emit("play_pause");
      });
	  
	  document.getElementById("liked").addEventListener("click", () => {
        console.log("Emitting 'liked'");
        socket.emit("liked");
      });
      socket.on("queue", (data) => {
        console.log("Received queue data from server:", data);
        const queueContainer = document.getElementById("queueContainer");
        queueContainer.innerHTML = ""; // Clear previous content
        const queue = new Set(data.queue);
        data.queue.forEach((song) => {
          const songDiv = document.createElement("div");
          songDiv.classList.add("song");
          songDiv.innerHTML = `
        <p>${song.title}</p>
      `;
          queueContainer.appendChild(songDiv);
        });
      });
      // Optional: Handle server messages
      document.getElementById("updateQueue").addEventListener("click", () => {
        console.log("Emitting 'updateQueue'");
        socket.emit("updateQueue");
      });

      function timeToRatio(timeString) {
        // Use regular expression to extract both times from the string
        const match = timeString.match(
          /(\d{1,2}):(\d{2})\s+of\s+(\d{1,2}):(\d{2})/
        );

        if (match) {
          // Extract minutes and seconds for current and total time
          const currentTime =
            parseInt(match[1], 10) * 60 + parseInt(match[2], 10);
          const totalTime =
            parseInt(match[3], 10) * 60 + parseInt(match[4], 10);

          // Calculate and return the ratio
          return (currentTime / totalTime).toFixed(4); // Rounded to 4 decimal places
        }
        return null; // Return null if the string doesn't match the expected format
      }
    </script>
  </body>
</html>
